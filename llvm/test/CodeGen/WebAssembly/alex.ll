; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mattr=+alex128 < %s | FileCheck %s --check-prefix=I128
; RUN: llc -mattr=+alex-overflow < %s | FileCheck %s --check-prefix=OVERFLOW

target triple = "wasm32-unknown-unknown"

define i128 @add_i128(i128 %a, i128 %b) {
; I128-LABEL:  add_i128:
; I128:        i64.add128
; OVERFLOW-LABEL: add_i128:
; OVERFLOW:       i64.add_overflow_u
; OVERFLOW:       i64.add_with_carry_u
  %c = add i128 %a, %b
  ret i128 %c
}

define i128 @sub_i128(i128 %a, i128 %b) {
; I128-LABEL:  sub_i128:
; I128:        i64.sub128
; OVERFLOW-LABEL: sub_i128:
; OVERFLOW:       i64.sub_overflow_u
; OVERFLOW:       i64.sub_with_carry_u
  %c = sub i128 %a, %b
  ret i128 %c
}

define i128 @mul_i128(i128 %a, i128 %b) {
; I128-LABEL:  mul_i128:
; I128:        i64.mul128
; OVERFLOW-LABEL: mul_i128:
; OVERFLOW:       i64.mul_wide_u
  %c = mul i128 %a, %b
  ret i128 %c
}

declare {i32, i1} @llvm.sadd.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.sadd.with.overflow.i64(i64 %a, i64 %b)
declare {i32, i1} @llvm.uadd.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.uadd.with.overflow.i64(i64 %a, i64 %b)
declare {i32, i1} @llvm.ssub.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.ssub.with.overflow.i64(i64 %a, i64 %b)
declare {i32, i1} @llvm.usub.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.usub.with.overflow.i64(i64 %a, i64 %b)

define { i32, i1 } @i32_add_overflow_s(i32 %a, i32 %b) {
; OVERFLOW-LABEL: i32_add_overflow_s:
; OVERFLOW:       i32.add_overflow_s
  %r = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %a, i32 %b)
  ret { i32, i1 } %r
}

define { i32, i1 } @i32_add_overflow_u(i32 %a, i32 %b) {
; OVERFLOW-LABEL: i32_add_overflow_u:
; OVERFLOW:       i32.add_overflow_u
  %r = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a, i32 %b)
  ret { i32, i1 } %r
}

define { i64, i1 } @i64_add_overflow_s(i64 %a, i64 %b) {
; OVERFLOW-LABEL: i64_add_overflow_s:
; OVERFLOW:       i64.add_overflow_s
  %r = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %a, i64 %b)
  ret { i64, i1 } %r
}

define { i64, i1 } @i64_add_overflow_u(i64 %a, i64 %b) {
; OVERFLOW-LABEL: i64_add_overflow_u:
; OVERFLOW:       i64.add_overflow_u
  %r = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %a, i64 %b)
  ret { i64, i1 } %r
}

define { i32, i1 } @i32_sub_overflow_s(i32 %a, i32 %b) {
; OVERFLOW-LABEL: i32_sub_overflow_s:
; OVERFLOW:       i32.sub_overflow_s
  %r = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %a, i32 %b)
  ret { i32, i1 } %r
}

define { i32, i1 } @i32_sub_overflow_u(i32 %a, i32 %b) {
; OVERFLOW-LABEL: i32_sub_overflow_u:
; OVERFLOW:       i32.sub_overflow_u
  %r = call { i32, i1 } @llvm.usub.with.overflow.i32(i32 %a, i32 %b)
  ret { i32, i1 } %r
}

define { i64, i1 } @i64_sub_overflow_s(i64 %a, i64 %b) {
; OVERFLOW-LABEL: i64_sub_overflow_s:
; OVERFLOW:       i64.sub_overflow_s
  %r = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %a, i64 %b)
  ret { i64, i1 } %r
}

define { i64, i1 } @i64_sub_overflow_u(i64 %a, i64 %b) {
; OVERFLOW-LABEL: i64_sub_overflow_u:
; OVERFLOW:       i64.sub_overflow_u
  %r = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %a, i64 %b)
  ret { i64, i1 } %r
}

define i128 @i64_mul_wide_s(i64 %a, i64 %b) {
; OVERFLOW-LABEL: i64_mul_wide_s:
; OVERFLOW:       i64.mul_wide_s
  %a128 = sext i64 %a to i128
  %b128 = sext i64 %b to i128
  %c = mul i128 %a128, %b128
  ret i128 %c
}

define i128 @i64_mul_wide_u(i64 %a, i64 %b) {
; OVERFLOW-LABEL: i64_mul_wide_u:
; OVERFLOW:       i64.mul_wide_u
  %a128 = zext i64 %a to i128
  %b128 = zext i64 %b to i128
  %c = mul i128 %a128, %b128
  ret i128 %c
}

define i64 @mul_i128_only_lo(i128 %a, i128 %b) {
; I128-LABEL:  mul_i128_only_lo:
; I128-NOT:    i64.mul128
; I128:        i64.mul
  %c = mul i128 %a, %b
  %d = trunc i128 %c to i64
  ret i64 %d
}
